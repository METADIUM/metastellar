{"version":3,"file":"4.7e5347b80fffc7bacddf.hot-update.js","sources":["webpack:///pages/user.js"],"sourcesContent":["import React, {Component} from 'react';\nimport metaStellar from '../ethereum/metaStellar.js';\nimport web3 from '../ethereum/web3.js';\nimport {BigNumber} from 'bignumber.js';\nimport {Layout, Astro, MetaID, AstroList} from '../components/index';\nimport LayoutHeader from '../components/Header';\nimport Alert from 'react-s-alert';\nimport {Button} from 'semantic-ui-react';\n\nexport default class User extends Component {\n\n  static async getInitialProps({ query: { address } }) {\n    const bucketLength = await metaStellar.methods.getBucketLength(address).call();\n    const starIndexes = Array.from(Array(parseInt(bucketLength))).map((e,i)=>i+1);\n    var pages = [], per_pages = 18\n    while (starIndexes.length > 0) {\n      pages.push(starIndexes.splice(0, per_pages));\n    }\n\n    const initProps = {\n      address: address,\n      pages: pages\n    };\n\n    return initProps || {};\n  }\n\n  constructor() {\n    super();\n    this.state = {\n      astros: [],\n      page: 0,\n      no_more: false,\n      loading: true\n    }\n  }\n\n  componentDidMount() {\n    console.log(this.props.pages);\n    this.paginateChain()\n    .then(() => this.setState({ loading: false }));\n\n    if (!(typeof window !== 'undefined' && typeof window.web3 !== 'undefined')) {\n      Alert.info('<h4>Metamask not available.</h4><ul><li><a href=\"https://metamask.io/\" target=\"_blank\">Get Metamask now.</a></li></ul>', {\n        position: 'top-right',\n        effect: 'slide',\n        html: true,\n        timeout: 5000\n      });\n    } else {\n      web3.eth.net.getNetworkType()\n          .then((network) => {\n            if (network !== 'ropsten') {\n              Alert.info('<h4>You are not in a ropsten network.</h4><ul><li><a href=\"https://metamask.io/\" target=\"_blank\">Open Metamask and change your network to ropsten.</a></li></ul>', {\n                position: 'top-right',\n                effect: 'slide',\n                html: true,\n                timeout: 5000\n              });\n            }\n          });\n    }\n  }\n\n  onClickPagination() {\n    this.setState({ loading: true }, () => {\n      this.paginateChain()\n      .then(() => this.setState({ loading: false, page: this.state.page + 1 }));\n    })\n  }\n\n  async paginateChain() {\n    await this.generatePromises(this.state.page).then(async (promises) => {\n      if (promises.length === 0) {\n        this.setState({ no_more: true });\n      } else {\n        for (const promise of promises) {\n          try {\n            this.setState({\n              astros: [...this.state.astros, await promise]\n            })\n          } catch (error) {\n            console.log(error, 'error');\n          }\n        }\n      }\n    })\n  }\n\n  async generatePromises(page) {\n    const minimumPrice = await metaStellar.methods.minimumPrice().call();\n\n    let promises = this.props.pages[page].map(async (idx) => {\n      const astroId = await metaStellar.methods.astroBucket(this.props.address, idx).call();\n      const rawAstro = await metaStellar.methods.getAstro(astroId).call();\n      const lastBid = await new BigNumber(parseInt(rawAstro.lastBid));\n      const minBidTic = await new BigNumber(parseInt(minimumPrice));\n      const currentBid = await lastBid.plus(minBidTic);\n      \n      return {\n        id: parseInt(rawAstro.id),\n        target: {name: rawAstro.name},\n        ra: {decimal: (rawAstro.raDecimal / 1000)},\n        dec: {decimal: (rawAstro.decDecimal / 1000)},\n        metaID: {\n          name: rawAstro.metaIDName,\n          owner: rawAstro.metaIDOwner,\n          sns: rawAstro.metaIDSns\n        },\n        lastBid: lastBid,\n        minBidTic: minBidTic,\n        currentBid: currentBid\n      }\n    });\n\n    return promises;\n  }\n\n  render() {\n    return (\n        <Layout fluid style={{margin: '5vw'}}>\n          <LayoutHeader>\n            <h3>{`${this.props.address}'s space`}</h3>\n          </LayoutHeader>\n          <AstroList astros={this.state.astros}/>\n          <Button fluid basic loading={this.state.loading} style={{ marginTop: '10px', marginBottom: '10px'}} onClick={() => this.onClickPagination()}>\n            Next Page\n          </Button>\n          <Alert stack={{limit: 3}} />\n        </Layout>\n    )\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// pages/user.js"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AAEA;;AACA;AACA;;AADA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;;;;;;;;;;;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAFA;AAQA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAHA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAJA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAOA;AAPA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAUA;AACA;AAXA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;AACA;AACA;;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAEA;AAFA;AAAA;AACA;AADA;AAGA;AAHA;AAAA;AACA;AADA;AAIA;AAJA;AAAA;AACA;AADA;AAKA;AALA;AAQA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAZA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAuBA;AACA;;;;;;;;;;;;;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;;;;;;;;AA1HA;AACA;AADA;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}